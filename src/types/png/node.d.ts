declare function crc32(buffer: any): number;
declare function view(buffer: any, shared?: boolean): Uint8Array;
declare function from_parts(buffers: any, shared?: boolean): Uint8Array;
declare function zlibSync(data: any, opts: any): Uint8Array;
declare function unzlibSync(data: any, out: any): any;
declare function compress(buf: any, level: any): Uint8Array;
declare function decompress(buf: any, limit: any): any;
declare function encode(data: any, { text, width, height, channels, depth, level }: {
    text: any;
    width: any;
    height: any;
    channels: any;
    depth?: number;
    level?: number;
}): Uint8Array;
declare function decode(array: any): {
    width: number;
    height: number;
    pixels: Uint8Array;
};
declare function filter_1(slice: any, pixels: any, p_offset: any, bytespp: any, row_length: any): void;
declare function filter_2(slice: any, pixels: any, p_offset: any, bytespp: any, row_length: any): void;
declare function filter_3(slice: any, pixels: any, p_offset: any, bytespp: any, row_length: any): void;
declare function filter_4(slice: any, pixels: any, p_offset: any, bytespp: any, row_length: any): void;
declare var __defProp: <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T;
declare function __markAsModule(target: any): any;
declare function __export(target: any, all: any): void;
declare var table: Uint32Array;
declare var u8: Uint8ArrayConstructor;
declare var u16: Uint16ArrayConstructor;
declare var u32: Uint32ArrayConstructor;
declare var clim: Uint8Array;
declare var fleb: Uint8Array;
declare var fdeb: Uint8Array;
declare function freb(eb: any, start: any): Uint16Array[];
declare var _a: Uint16Array[];
declare var fl: Uint16Array;
declare var revfl: Uint16Array;
declare var _b: Uint16Array[];
declare var fd: Uint16Array;
declare var revfd: Uint16Array;
declare var rev: Uint16Array;
declare var i: number;
declare var x: any;
declare function hMap(cd: any, mb: any, r: any): Uint16Array;
declare var flt: Uint8Array;
declare var fdt: Uint8Array;
declare var flm: Uint16Array;
declare var flrm: Uint16Array;
declare var fdm: Uint16Array;
declare var fdrm: Uint16Array;
declare function max(a: any): any;
declare function bits(d: any, p: any, m: any): number;
declare function bits16(d: any, p: any): number;
declare function shft(p: any): number;
declare function slc(v: any, s: any, e: any): Uint8Array;
declare function inflt(dat: any, buf: any, st: any): any;
declare function wbits(d: any, p: any, v: any): void;
declare function wbits16(d: any, p: any, v: any): void;
declare function hTree(d: any, mb: any): any[];
declare function ln(n: any, l: any, d: any): any;
declare function lc(c: any): any[];
declare function clen(cf: any, cl: any): number;
declare function wfblk(out: any, pos: any, dat: any): number;
declare function wblk(dat: any, out: any, final: any, syms: any, lf: any, df: any, eb: any, li: any, bs: any, bl: any, p: any): any;
declare var deo: Uint32Array;
declare var et: Uint8Array;
declare function dflt(dat: any, lvl: any, plvl: any, pre: any, post: any, lst: any): Uint8Array;
declare function adler(): {
    p: (d: any) => void;
    d: () => number;
};
declare function dopt(dat: any, opt: any, pre: any, post: any, st: any): Uint8Array;
declare function wbytes(d: any, b: any, v: any): void;
declare function zlh(c: any, o: any): void;
declare function zlv(d: any): void;
declare var __IHDR__: Uint8Array;
declare var __IDAT__: Uint8Array;
declare var __IEND__: Uint8Array;
declare var __IEND_CRC__: number;
declare var HEAD: Uint8Array;
declare namespace color_types {
    const GREYSCALE: number;
    const TRUECOLOR: number;
    const INDEXED_COLOR: number;
    const GREYSCALE_ALPHA: number;
    const TRUECOLOR_ALPHA: number;
}
declare var channels_to_color_type: {
    1: number;
    2: number;
    3: number;
    4: number;
};
declare var utf8encoder: TextEncoder;
